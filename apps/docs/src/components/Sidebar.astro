---
import fs from "fs";
import { join } from "path";
import matter from "gray-matter";
import {
  docCategorySchema,
  docMatterSchema,
  type DocCategory,
  type DocMatter,
} from "@/types";

const docsPath = join(process.cwd(), "src", "pages", "docs");
const directories = fs.readdirSync(docsPath);

const categories: Array<{
  category: DocCategory;
  pages: Array<DocMatter & { slug: string }>;
  slug: string;
}> = directories
  .map((dir) => {
    const categoryPath = join(docsPath, dir);
    const metaJsonPath = join(categoryPath, "/_meta.json");

    // Read the _meta.json file at the root of each doc directory
    const categoryJson = JSON.parse(fs.readFileSync(metaJsonPath, "utf8"));
    const category = docCategorySchema.parse(categoryJson);

    // Get all pages in the category
    const categoryPages = fs
      .readdirSync(categoryPath)
      .filter((file) => file !== "_meta.json");

    // Parse each page, return the frontmatter and slug
    const pages = categoryPages
      .map((page) => {
        const docPagePath = join(categoryPath, page);
        const docFrontMatter = matter.read(docPagePath).data;

        return {
          ...docMatterSchema.parse(docFrontMatter),
          slug: join(dir, page.split(".")[0]),
        };
      })
      .sort((a, b) => (a.order || 0) - (b.order || 0));

    return {
      category,
      pages,
      slug: dir,
    };
  })
  .sort((a, b) => a.category.order - b.category.order);
---

<nav box-="square contain:!top">
  <div><span is-="badge">Documentation</span></div>

  <div id="category-container">
    <div id="category-list">
      {
        categories.map((category) => (
          <details open>
            <summary>{category.category.title}</summary>
            <ul marker-="tree" cap-="end">
              {category.pages.map((page) => (
                <a data-slug={page.slug} href={join("/docs", page.slug)}>
                  <li>{page.title}</li>
                </a>
              ))}
            </ul>
          </details>
        ))
      }
    </div>
  </div>

  <div box-="square contain:!top" id="keybind-container">
    <span is-="badge">Keybinds</span>
    <ul marker-="none" space-="p:1">
      <li><code>&lt;C-b&gt;</code> focus sidebar</li>
      <li><code>↓/j</code> move down</li>
      <li><code>↑/k</code> move up</li>
    </ul>
  </div>
</nav>

<style>
  nav {
    display: flex;
    flex-direction: column;
    gap: 1lh;
    max-width: 32ch;
    overflow: hidden;
    width: 100%;
    --box-border-color: var(--surface0);

    &:focus-within {
      --box-border-color: var(--subtext0);
    }

    #category-container {
      position: relative;
      flex-grow: 1;
    }

    #category-list {
      position: absolute;
      inset: 0;
      display: flex;
      flex-direction: column;
      gap: 1lh;
      padding: 0 1ch;
      overflow-y: auto;
    }

    #keybind-container {
      --box-border-color: var(--surface0);
    }
  }

  [data-slug] {
    color: var(--subtext0);
    text-decoration: none;
    outline: none;

    &.active {
      color: var(--background);

      li {
        background-color: var(--sky);
      }

      &:focus {
        color: var(--sky);

        li {
          background-color: var(--surface0);
          /* Make it look like the first character is selected */
        }
      }
    }

    &:focus > li {
      background-color: var(--surface0);
    }
  }

  [data-slug]:focus > li,
  summary:focus {
    background-image: linear-gradient(
      to right,
      transparent 0,
      var(--text) 0,
      var(--text) 1ch,
      transparent 1ch,
      transparent
    );
    &::before, &::marker {
      color: var(--background) !important;
    }
  }
</style>

<script>
  const locationPath = window.location.pathname;
  const [category, page] = locationPath.split("/docs/")[1].split("/");

  if (category && page) {
    const pageLinkElement: HTMLAnchorElement | null = document.querySelector(
      `[data-slug="${category}/${page}"]`,
    );
    const pageLinkElements = document.querySelectorAll(`[data-slug]`);

    if (pageLinkElement) {
      pageLinkElements.forEach((el) => el.classList.remove("active"));
      pageLinkElement.classList.add("active");

      window.addEventListener("keydown", (e) => {
        if (e.key === "b" && e.ctrlKey) {
          pageLinkElement.focus();
        }

        const container = document.querySelector("nav:focus-within");

        if (container && document.activeElement) {
          const focusableElements: NodeListOf<HTMLAnchorElement> =
            document.querySelectorAll("details[open] a, summary");
          const currentIndex = Array.from(focusableElements).indexOf(
            document.activeElement as HTMLAnchorElement,
          );

          if (e.key === "j" || e.key === "ArrowDown") {
            e.preventDefault();
            focusableElements[
              (currentIndex + 1) % focusableElements.length
            ].focus();
          }

          if (e.key === "k" || e.key === "ArrowUp") {
            e.preventDefault();
            focusableElements[
              (currentIndex - 1 + focusableElements.length) %
                focusableElements.length
            ].focus();
          }
        }
      });
    }
  }
</script>
