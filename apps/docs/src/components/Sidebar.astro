---
import { type DocCategory } from "@/types";
import { type MarkdownInstance } from "astro";

// order of documentation categories
// if a category is not included in the array, it will be moved to the end
const categoryOrder = ["intro", "components", "themes"];

const docPages = Object.values(
  import.meta.glob<MarkdownInstance<DocCategory>>("src/pages/docs/**/*.md", {
    eager: true,
  }),
);
const cats: Map<string, MarkdownInstance<DocCategory>[]> = new Map();

for (const docPage of docPages) {
  if (!docPage.url) continue;

  const [category] = docPage.url
    .replace("/docs/", "")
    .split("/")
    .filter(Boolean);

  cats.set(
    category,
    [...(cats.get(category) || []), docPage].sort(
      (a, b) => a.frontmatter.order - b.frontmatter.order,
    ),
  );
}

const categories = Array.from(cats.entries()).sort(([catA], [catB]) => {
  const indexA = categoryOrder.indexOf(catA);
  const indexB = categoryOrder.indexOf(catB);

  const inOrderA = indexA !== -1;
  const inOrderB = indexB !== -1;

  if (inOrderA && inOrderB) return indexA - indexB;
  else if (inOrderA) return -1;
  else if (inOrderB) return 1; else return 0;
});
---

<nav box-="square contain:!top">
  <div><span is-="badge">Documentation</span></div>

  <div id="category-container">
    <div id="category-list">
      {
        categories.map(([slug, pages]) => (
          <details open>
            <summary>{slug}</summary>
            <ul marker-="tree" cap-="end">
              {pages.map((page) => (
                <a href={page.url}>
                  <li>{page.frontmatter.title}</li>
                </a>
              ))}
            </ul>
          </details>
        ))
      }
    </div>
  </div>

  <div box-="square contain:!top" id="keybind-container">
    <span is-="badge">Keybinds</span>
    <ul marker-="none" space-="p:1">
      <li><code>&lt;C-b&gt;</code> focus sidebar</li>
      <li><code>↓/j</code> move down</li>
      <li><code>↑/k</code> move up</li>
    </ul>
  </div>
</nav>

<style>
  nav {
    display: flex;
    flex-direction: column;
    gap: 1lh;
    max-width: 32ch;
    overflow: hidden;
    width: 100%;
    --box-border-color: var(--surface0);

    &:focus-within {
      --box-border-color: var(--subtext0);
    }

    #category-container {
      position: relative;
      flex-grow: 1;
    }

    #category-list {
      position: absolute;
      inset: 0;
      display: flex;
      flex-direction: column;
      gap: 1lh;
      padding: 0 1ch;
      overflow-y: auto;
    }

    #keybind-container {
      --box-border-color: var(--surface0);
    }
  }

  ul > a[href] {
    color: var(--subtext0);
    text-decoration: none;
    outline: none;

    &.active {
      color: var(--background);

      li {
        background-color: var(--sky);
      }

      &:focus {
        color: var(--sky);

        li {
          background-color: var(--surface0);
          /* Make it look like the first character is selected */
        }
      }
    }

    &:focus > li {
      background-color: var(--surface0);
    }
  }

  ul > a[href]:focus > li,
  summary:focus {
    background-image: linear-gradient(
      to right,
      transparent 0,
      var(--text) 0,
      var(--text) 1ch,
      transparent 1ch,
      transparent
    );
    &::before,
    &::marker {
      color: var(--background) !important;
    }
  }
</style>

<script>
  const locationPath = window.location.pathname;
  const pageLinkElement: HTMLAnchorElement | null = document.querySelector(
    `ul > a[href="${locationPath}"]`,
  );
  const pageLinkElements = document.querySelectorAll(`ul > a[href]`);

  if (pageLinkElement) {
    pageLinkElements.forEach((el) => el.classList.remove("active"));
    pageLinkElement.classList.add("active");

    window.addEventListener("keydown", (e) => {
      if (e.key === "b" && e.ctrlKey) {
        pageLinkElement.focus();
      }

      const container = document.querySelector("nav:focus-within");

      if (container && document.activeElement) {
        const focusableElements: NodeListOf<HTMLAnchorElement> =
          document.querySelectorAll("details[open] a, summary");
        const currentIndex = Array.from(focusableElements).indexOf(
          document.activeElement as HTMLAnchorElement,
        );

        if (e.key === "j" || e.key === "ArrowDown") {
          e.preventDefault();
          focusableElements[
            (currentIndex + 1) % focusableElements.length
          ].focus();
        }

        if (e.key === "k" || e.key === "ArrowUp") {
          e.preventDefault();
          focusableElements[
            (currentIndex - 1 + focusableElements.length) %
              focusableElements.length
          ].focus();
        }
      }
    });
  }
</script>
