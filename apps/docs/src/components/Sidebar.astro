---
import { join } from "path";
import { getCollection } from "astro:content";

// order of documentation categories
// if a category is not included in the array, it will be moved to the end
const categoryOrder = ["intro", "components", "themes"];

const docPages = await getCollection("docs");
const cats: Map<string, typeof docPages> = new Map();

for (const docPage of docPages) {
  const [category] = docPage.id.split("/");

  const categoryPages = [...(cats.get(category) || []), docPage];

  cats.set(
    category,
    categoryPages
      .sort((a, b) => a.data.title.localeCompare(b.data.title))
      .sort((a, b) => {
        return (
          (a.data.order ?? categoryPages.length) -
          (b.data.order ?? categoryPages.length)
        );
      }),
  );
}

const categories = Array.from(cats.entries()).sort(([catA], [catB]) => {
  const indexA = categoryOrder.indexOf(catA);
  const indexB = categoryOrder.indexOf(catB);

  const inOrderA = indexA !== -1;
  const inOrderB = indexB !== -1;

  if (inOrderA && inOrderB) return indexA - indexB;
  else if (inOrderA) return -1;
  else if (inOrderB) return 1;
  else return 0;
});
---

<nav box-="square contain:!top">
  <div><span is-="badge">Documentation</span></div>

  <div id="category-container">
    <div id="category-list">
      {
        categories.map(([slug, pages]) => (
          <details open>
            <summary>{slug}</summary>
            <ul>
              {pages.map((page) => (
                <a href={join("/docs", page.id)}>{page.data.title}</a>
              ))}
            </ul>
          </details>
        ))
      }
    </div>
  </div>

  <div box-="square contain:!top" id="keybind-container">
    <span is-="badge">Shortcuts</span>
    <ul marker-="none" space-="p:1">
      <li><code>&lt;C-b&gt;</code> focus sidebar</li>
      <li><code>↓/j</code> move down</li>
      <li><code>↑/k</code> move up</li>
    </ul>
  </div>
</nav>

<style>
  nav {
    display: flex;
    flex-direction: column;
    gap: 1lh;
    max-width: 32ch;
    overflow: hidden;
    width: 100%;
    --box-border-color: var(--surface0);

    &:focus-within {
      --box-border-color: var(--subtext0);
    }

    #category-container {
      position: relative;
      flex-grow: 1;
    }

    #category-list {
      position: absolute;
      inset: 0;
      display: flex;
      flex-direction: column;
      gap: 1lh;
      padding: 0 1ch;
      overflow-y: auto;
    }

    #keybind-container {
      --box-border-color: var(--surface0);
    }
  }

  ul > a[href] {
    color: var(--subtext0);
    text-decoration: none;
    outline: none;
    display: list-item;

    &::before {
      content: "├ ";
    }

    &:last-of-type::before {
      content: "└ ";
    }

    &::highlight(vim) {
      background-color: var(--text);
      color: var(--background);
    }

    &.active {
      color: var(--sky);
      background-color: var(--surface0);
    }

    &:focus > li {
      background-color: var(--surface0);
    }
  }

  summary::highlight(vim) {
    background-color: var(--text);
    color: var(--background);
  }
</style>

<script>
  import { applyVimCursorHighlight } from "@/utils/vim";

  const locationPath = window.location.pathname;
  const pageLinkElement = document.querySelector(
    `ul > a[href="${locationPath}"]`,
  ) as HTMLAnchorElement;
  const pageLinkElements = document.querySelectorAll(`ul > a[href]`);
  let currentElement: HTMLElement | null = null;

  pageLinkElements.forEach((el) => el.classList.remove("active"));
  pageLinkElement.classList.add("active");

  window.addEventListener("keydown", (e) => {
    if (e.key === "b" && e.ctrlKey) {
      const elementToFocus = currentElement ?? pageLinkElement;

      elementToFocus.focus();
      applyVimCursorHighlight(elementToFocus);
    }
  });

  document.querySelector("nav")?.addEventListener("keydown", (e) => {
    const focusableElements: NodeListOf<HTMLElement> =
      document.querySelectorAll("details[open] a, summary");
    const currentIndex = Array.from(focusableElements).indexOf(
      document.activeElement as HTMLElement,
    );

    if (e.key === "j" || e.key === "ArrowDown") {
      e.preventDefault();
      const nextActiveElement =
        focusableElements[(currentIndex + 1) % focusableElements.length];

      nextActiveElement.focus();
      nextActiveElement.scrollIntoView({ block: "nearest", inline: "nearest" });
      applyVimCursorHighlight(nextActiveElement);
      currentElement = nextActiveElement;
    }

    if (e.key === "k" || e.key === "ArrowUp") {
      e.preventDefault();
      const nextActiveElement =
        focusableElements[
          (currentIndex - 1 + focusableElements.length) %
            focusableElements.length
        ];

      nextActiveElement.focus();
      nextActiveElement.scrollIntoView({ block: "nearest", inline: "nearest" });
      applyVimCursorHighlight(nextActiveElement);
      currentElement = nextActiveElement;
    }
  });
</script>
