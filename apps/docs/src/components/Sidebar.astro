---
import "./Sidebar.css";
import { join } from "path";
import { getCollection } from "astro:content";

// order of documentation categories
// if a category is not included in the array, it will be moved to the end
const categoryOrder = ["intro", "components", "themes"];

const docPages = await getCollection("docs");
const cats: Map<string, typeof docPages> = new Map();

for (const docPage of docPages) {
  const [category] = docPage.id.split("/");

  const categoryPages = [...(cats.get(category) || []), docPage];

  cats.set(
    category,
    categoryPages
      .sort((a, b) => a.data.title.localeCompare(b.data.title))
      .sort((a, b) => {
        return (
          (a.data.order ?? categoryPages.length) -
          (b.data.order ?? categoryPages.length)
        );
      }),
  );
}

const categories = Array.from(cats.entries()).sort(([catA], [catB]) => {
  const indexA = categoryOrder.indexOf(catA);
  const indexB = categoryOrder.indexOf(catB);

  const inOrderA = indexA !== -1;
  const inOrderB = indexB !== -1;

  if (inOrderA && inOrderB) return indexA - indexB;
  else if (inOrderA) return -1;
  else if (inOrderB) return 1;
  else return 0;
});

const { pathname: urlPath } = Astro.url;
---

<nav box-="square contain:!top" id="sidebar">
  <div><span is-="badge">Documentation</span></div>

  <div space-="px:1" flex-="row" id="filter-container" class="hidden">
    <input id="filter-input" flex-="grow" placeholder="Filter" />
  </div>

  <div id="category-container">
    <div id="category-list">
      {
        categories.map(([slug, pages]) => (
          <details open>
            <summary>{slug}</summary>
            <ul>
              {pages.map((page) => {
                const path = `/${page.id}`;
                return (
                  <a
                    href={path}
                    class={urlPath === path ? "active" : ""}
                    data-slug={page.id}
                  >
                    {page.data.title}
                  </a>
                );
              })}
            </ul>
          </details>
        ))
      }
    </div>
  </div>

  <div box-="square contain:!top" id="keybind-container">
    <span is-="badge">Shortcuts</span>
    <ul marker-="none" space-="p:1">
      <li><code>h</code> focus sidebar</li>
      <li><code>j</code> move down</li>
      <li><code>k</code> move up</li>
      <li><code>l</code> focus content</li>
      <li><code>/</code> filter</li>
    </ul>
  </div>
</nav>

<!-- Vim Navigation -->
<script>
  import {
    applyVimNavigation,
    isUserTyping,
    vimFocusElement,
  } from "@/utils/vim";

  let currentElement: HTMLElement | null = document.querySelector(
    `ul > a.active`,
  );

  window.addEventListener("keydown", (e) => {
    // Don't navigate if the user is typing
    if (isUserTyping()) {
      return;
    }

    if (e.key === "h") {
      const elementToFocus = currentElement ?? null;

      if (elementToFocus) {
        vimFocusElement(elementToFocus);
      }
    }
  });

  const sidebar = document.getElementById("sidebar");
  if (sidebar) {
    applyVimNavigation(
      sidebar,
      "details:not(.hidden)[open] a:not(.hidden), details:not(.hidden) summary",
      (element) => {
        currentElement = element;
      },
    );
  }
</script>

<!-- Filter -->
<script>
  import { isUserTyping, vimFocusElement } from "@/utils/vim";

  const sidebar = document.getElementById("sidebar") as HTMLElement;
  const filterInput = document.getElementById(
    "filter-input",
  ) as HTMLInputElement;
  const filterContainer = document.getElementById(
    "filter-container",
  ) as HTMLDivElement;

  sidebar.addEventListener("keydown", (e) => {
    if (isUserTyping()) return;

    if (e.key === "/") {
      e.preventDefault();
      filterContainer.classList.remove("hidden");
      filterInput.focus();
    }
  });

  filterInput.addEventListener("input", () => {
    const value = filterInput.value.trim();

    const focusableLinks = document.querySelectorAll("details a");

    focusableLinks.forEach((element) => {
      element.classList.remove("hidden");

      if (element.getAttribute("data-slug")?.includes(value.toLowerCase()))
        return;

      element.classList.add("hidden");
    });

    const details = document.querySelectorAll("details");

    details.forEach((detail) => {
      detail.classList.remove("hidden");

      const links = Array.from(detail.querySelectorAll("a"));

      if (links.every((link) => link.classList.contains("hidden"))) {
        detail.classList.add("hidden");
      }
    });
  });

  filterInput.addEventListener("keydown", (e) => {
    if (e.key === "Escape" || e.key === "Enter") {
      e.preventDefault();

      const visibleFocusableElements: NodeListOf<HTMLElement> =
        document.querySelectorAll(`details:not(.hidden)[open] a:not(.hidden)`);

      if (visibleFocusableElements.length > 0) {
        const [elementToFocus] = visibleFocusableElements;

        vimFocusElement(elementToFocus);
      }

      if (filterInput.value.trim() === "") {
        filterContainer.classList.add("hidden");
      }
    }
  });
</script>
