---
import { compareUrlPaths } from '@/utils/url';
import './Sidebar.css';
import { makeSortedCategoryEntries } from '@/utils/content';

const categories = makeSortedCategoryEntries();

const { pathname: urlPath } = Astro.url;
---

<nav box-="square contain:!top" id="sidebar">
  <div><span is-="badge">Documentation</span></div>

  <div id="category-container">
    <div id="category-list">
      {
        categories.map(([slug, pages]) => (
          <details open>
            <summary>{slug}</summary>
            <ul>
              {pages.map((page) => {
                const path = `/${page.id}`;
                return (
                  <a
                    href={path}
                    class={compareUrlPaths(urlPath, page.id) ? "active" : ""}
                    data-slug={page.id}
                  >
                    {page.data.title}
                  </a>
                );
              })}
            </ul>
          </details>
        ))
      }
    </div>
  </div>

  <div box-="square contain:!top" id="keybind-container">
    <span is-="badge">Shortcuts</span>
    <ul marker-="none" space-="p:1">
      <li><code>h</code> focus sidebar</li>
      <li><code>j</code> down</li>
      <li><code>k</code> up</li>
      <li><code>l</code> focus content</li>
      <li><code>/</code> search</li>
    </ul>
  </div>
</nav>

<!-- Vim Navigation -->
<script>
  import {
    applyVimNavigation,
    isUserTyping,
    vimFocusElement,
  } from "@/utils/vim";

  let currentElement: HTMLElement | null = document.querySelector(
    `ul > a.active`,
  );

  window.addEventListener("keydown", (e) => {
    // Don't navigate if the user is typing
    if (isUserTyping()) {
      return;
    }

    if (e.key === "h") {
      const elementToFocus = currentElement ?? null;

      if (elementToFocus) {
        vimFocusElement(elementToFocus);
      }
    }
  });

  const sidebar = document.getElementById("sidebar");
  if (sidebar) {
    applyVimNavigation(
      sidebar,
      "details:not(.hidden)[open] a:not(.hidden), details:not(.hidden) summary",
      (element) => {
        currentElement = element;
      },
    );
  }
</script>
