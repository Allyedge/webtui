---
import "./Doc.css";
import Sidebar from "@/components/Sidebar.astro";
import Layout from "@/layouts/Layout.astro";
import catppuccinUrl from "@webtui/theme-catppuccin?url";

const { frontmatter } = Astro.props;
---

<link rel="stylesheet" href={catppuccinUrl} id="theme-stylesheet" />

<Layout>
  <div flex-="col grow" space-="px:2 py:1">
    <div flex-="row grow gap:1">
      <div id="sidebar-container" class="mobile-hidden">
        <Sidebar />
      </div>
      <article box-="square contain:!top">
        <header flex-="row justify:between">
          <div is-="badge"><h1>{frontmatter.title}</h1></div>
        </header>
        <div id="scroll-container">
          <main id="main-content">
            <slot />
          </main>
        </div>
      </article>
    </div>
    <div box-="square contain" id="mobile-nav" flex-="row gap:1">
      <button flex-="grow !basis" variant-="secondary" id="menu-button"
        >&#xeb86; Menu</button
      >
      <button flex-="grow !basis" id="docs-button">&#xf15b; Docs</button>
    </div>
  </div>
</Layout>

<!-- Vim Navigation -->
<script>
  import { applyVimNavigation, isUserTyping, vimFocusElement } from "@/utils/vim";

  const vimTabbableElements: NodeListOf<HTMLElement> =
    document.querySelectorAll('#main-content [tabindex="0"]');

  let currentElement: HTMLElement | null = null;

  const findFirstFocusableElement = () =>
    Array.from(vimTabbableElements).find((el) => {
      const rect = el.getBoundingClientRect();

      return rect.top >= 0 && rect.bottom <= window.innerHeight;
    });

  window.addEventListener("keydown", (e) => {
    // Don't navigate if the user is typing
    if (isUserTyping()) {
      return;
    }

    if (e.key === "l") {
      const elementToFocus =
        currentElement ?? findFirstFocusableElement() ?? null;

      if (elementToFocus) {
        vimFocusElement(elementToFocus);
      }
    }
  });

  const mainContent = document.getElementById("main-content") as HTMLElement;

  applyVimNavigation(mainContent, '#main-content [tabindex="0"]', (element) => {
    currentElement = element;
  });
</script>

<!-- Mobile Navigation -->
<script>
  const menuButton = document.getElementById(
    "menu-button",
  ) as HTMLButtonElement;
  const docsButton = document.getElementById(
    "docs-button",
  ) as HTMLButtonElement;
  const sidebarContainer = document.getElementById(
    "sidebar-container",
  ) as HTMLDivElement;
  const article = document.querySelector("article") as HTMLElement;

  menuButton.addEventListener("click", () => {
    sidebarContainer.classList.remove("mobile-hidden");
    article.classList.add("mobile-hidden");
    menuButton.setAttribute("variant-", "default");
    docsButton.setAttribute("variant-", "secondary");
  });

  docsButton.addEventListener("click", () => {
    sidebarContainer.classList.add("mobile-hidden");
    article.classList.remove("mobile-hidden");
    menuButton.setAttribute("variant-", "secondary");
    docsButton.setAttribute("variant-", "default");
  });
</script>
